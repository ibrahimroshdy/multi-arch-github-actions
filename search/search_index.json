{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Multi Arch GitHub Actions","text":""},{"location":"#about","title":"About","text":"<p>A sample project of adding continuous integration multi-arch buildx to GitHub and utilising the GitHub actions, workflows and job settings. This project contains a <code>simple_loop.py</code> python file that prints a progress bar of a for loop. The aim of this project to serve a sample project for implementing GitHub's workflow using workflow files, and custom actions and multiple jobs.</p>"},{"location":"#folder_structure","title":"Folder Structure","text":"<pre><code>multi-arch-github-actions\n\u2502\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 .github # gitHub workflow directory\n\u2502     \u251c\u2500\u2500 actions # Custom actions directory\n\u2502     \u2502   \u2514\u2500\u2500 install-run-code # This project's Custom Action to be referred to by name in workflows\n\u2502     \u2502       \u2514\u2500\u2500 action.yml # Action instructions file [Must be named action]\n\u2502     \u2514\u2500\u2500 workflows # This project's Workflows\n\u2502         \u2514\u2500\u2500 ci_workflow.yml # Workflow instructions file\n\u251c\u2500\u2500 .gitignore # git ignore file\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 simple_loop.py\n</code></pre>"},{"location":"#getting_started","title":"Getting Started","text":"<p>There is no need to run the project locally, but in case it is needed here is the quick start instructions used. Note: Those are the same instructions in <code>.github/workflows/ci_workflows.yml</code> and <code>.github/actions/install-run-code/actions.yml</code></p> <p>Project is also setup for a Docker Multi-arch build for <code>arm64</code> and <code>amd64</code>. Read more about it in this article.</p> <p>Create a virtualenv</p> <pre><code> virtualenv venv -p python3\n</code></pre> <p>Activate your venv</p> <pre><code>source venv/bin/activate\n</code></pre> <p>Install poetry and pyfiglet using pip</p> <pre><code>pip install poetry pyfiglet\n</code></pre> <p>Run poetry install to install all needed python packages</p> <pre><code>poetry install\n</code></pre> <p>Run pyfiglet because you can</p> <pre><code>pyfiglet Multi Arch GitHub Actions\n</code></pre> <p>Finally, run code</p> <pre><code>python simple_loop.py\n</code></pre> <p>You should have something like that:</p> <pre><code>This is a progress bar of the simple loop script\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000000/1000000 [00:00&lt;00:00, 4474649.76it/s]\n</code></pre>"},{"location":"ci_multi_arch/","title":"Multi-Architecture Docker Images","text":"<p>Multi-Architecture Docker Images</p> <p>This guide will show you how to build and push multi-architecture Docker images using GitHub Actions.</p> <p>Probably thats all you need to setup a multi-arch build for your project. The following is a sample GitHub workflow file that builds and pushes multi-arch Docker images to GitHub Container Registry (ghcr.io).</p> <pre><code># Github workflow runner for Docker Multi-Arch using QEMU, Buildx for amd64 &amp; arm64\nname: Docker Multi-Arch\n\non: [ push ]\n\njobs:\n  build:\n    runs-on: ubuntu-20.04\n    name: build for amd64/arm64\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n        # Setup hardware emulator using QEMU\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n        # Setup Docker Buildx for multi-arch images\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.pat }} # GitHub Personal Access Token (PAT)\n\n      - name: Build and push\n        uses: docker/build-push-action@v4\n        with:\n          context: . # use the Dockerfile in the root directory\n          platforms: linux/amd64, linux/arm64 # multi-arch build\n          push: true # push the image to the registry\n          tags: ghcr.io/${{ github.repository }}:${{ github.ref_name }} # tag the image with the branch name\n</code></pre>"}]}